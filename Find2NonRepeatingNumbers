Question: We are given an array of length 2n+2 where n numbers are repeated exactly twice and 2 numbers are 
non-repeating. Find the non-repeating chracters.

Solution:
1. Using XOR :	Time Complexity = O(n), Space Complexity = O(1)
NOTE: This method is applicable ONLY for 2 NON-repeating numbers and NOT for n Non-repeating numbers.
2. Using HashMap : Time Complexity = O(n), Space Complexity = O(n)
NOTE: This method is applicable for not just 2 NON-repeating numbers but for n Non-repeating numbers.
3. Using Sorting: Time Complexity = O(nlgn), Space Complexity = O(1)
NOTE: This method is applicable for not just 2 NON-repeating numbers but for n Non-repeating numbers.

****************************************** Using XOR ***************************************************
package find2NonRepeatingNumbers;

/*
 * NOTE: This method is applicable ONLY for 2 NON-repeating numbers and NOT for n Non-repeating numbers.
*/

import java.util.Scanner;

public class UsingXOR {
public static void main(String[] args) {
	Scanner in = new Scanner(System.in);
	try{
		System.out.println("Enter the number of number of elements in the array");
		int n = in.nextInt();
		System.out.println("Enter the 2 non repeating and the others as repeating elements in the array");
		int[] a = new int[n];
		for(int i=0;i<n;i++)
			a[i]=in.nextInt();
		get2NonRepeatingNumbers(a);
	}
	finally{
		in.close();
	}
}

private static void get2NonRepeatingNumbers(int[] a) {
	int xorAll = a[0];
	for(int i=1;i<a.length;i++)
		xorAll^=a[i];
	
	int firstNonRepeatedNumber=0; 
	int secondNonRepeatedNumber=0;
	
	// get the rightmost set bit
	int getRightmostSetBit = xorAll & ~(xorAll-1);
	
	// divide the xorAll value into 2 sets
	for(int i=0;i<a.length;i++){
	if((getRightmostSetBit & a[i])>0)     // If the & operation results in set bit
		firstNonRepeatedNumber^=a[i];
	else                                  // If the & operation results in unset bit
		secondNonRepeatedNumber^=a[i];
	}
	System.out.println(firstNonRepeatedNumber);
	System.out.println(secondNonRepeatedNumber);
}
}
/*Analysis:
	Time Complexity=O(n)
	Space Complexity = O(1)
	
	*
	*TODO: Try using HashMap. NOT EFFICIENT. The only problem is that this would take O(n) space complexity along with O(n) time complexity
	*	 : Try using Sorting. NOT EFFICIENT. The problem is that this would take O(nlgn) time complexity.
	*	 : Try the same thing for characters as well(i.e. String with 2 non-repeating characters).
	*    : Try the same thing for single non-repeating number.
	*/

****************************************** Using HashMap ***************************************************
package find2NonRepeatingNumbers;

/*
 * NOTE: This method is applicable for not just 2 NON-repeating numbers but for n Non-repeating numbers.
*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class UsingHashMap {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try{
			System.out.println("Enter the number of number of elements in the array");
			int n = in.nextInt();
			System.out.println("Enter the 2 non repeating and the others as repeating elements in the array");
			int[] a = new int[n];
			for(int i=0;i<n;i++)
				a[i]=in.nextInt();
			get2NonRepeatingNumbers(a);
		}
		finally{
			in.close();
		}
	}

	private static void get2NonRepeatingNumbers(int[] a) {
		HashMap<Integer,Integer> hash = new HashMap<Integer,Integer>();
		for(int i=0;i<a.length;i++){
			if(!hash.containsKey(a[i])){
				hash.put(a[i], 1);
			}
			else{
				int count = hash.get(a[i]);
				count++;
				hash.put(a[i], count);
			}
		}
		Set<Map.Entry<Integer,Integer>> set = hash.entrySet();
		Iterator<Map.Entry<Integer, Integer>> iter = set.iterator();  // we iterate over Map.Entry<>()
		while(iter.hasNext()){
			Map.Entry<Integer, Integer> element=iter.next();
			if(element.getValue()==1)
				System.out.println("The non-repeating element is: "+element.getKey());
		}
	}
	
}
/*
Analysis:
	Time Complexity = O(n)
	Space Complexity = O(n)
*/

****************************************** Using Sorting ***************************************************
package find2NonRepeatingNumbers;

import java.util.Arrays;
import java.util.Scanner;

public class UsingSorting {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try{
			System.out.println("Enter the number of number of elements in the array");
			int n = in.nextInt();
			System.out.println("Enter the 2 non repeating and the others as repeating elements in the array");
			int[] a = new int[n];
			for(int i=0;i<n;i++)
				a[i]=in.nextInt();
			get2NonRepeatingNumbers(a);
		}
		finally{
			in.close();
		}
	}

	private static void get2NonRepeatingNumbers(int[] a) {
		Arrays.sort(a);
		int i=0;
		while(i<(a.length-1)){    // this loop runs (n-1) times, to compare every element with the next element.
			if(a[i]==a[i+1])
				i=i+2;
			if(a[i]!=a[i+1]){
				System.out.println("The non-repeating number is: "+a[i]);
				i=i+1;
				if(i==a.length-1) // last element
					System.out.println("The non-repeating number is: "+a[i]);
			}
		}
	}
}
/*
Analysis:
	Time Complexity = O(nlgn)
	Space Complexity = O(1)
*/
