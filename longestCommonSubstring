/* Time Complexity of this algorithm is O(n*m). Space Complexity is O(n*m) 


package array;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class LongestComonSubsequence {
	public static int[][] table;
public static void main(String[] args) throws Exception {
	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	System.out.println("Enter the first string");
	String s1 = in.readLine();
	System.out.println("Enter the second string");
	String s2 = in.readLine();
	char[] c1 = s1.toCharArray();
	int m = c1.length;
	char[] c2=s2.toCharArray();
	int n = c2.length;
	int LCSlength=lcs(c1,c2,m,n);
	System.out.println("The LCS of the given two strings is: "+LCSlength);
	char[] LCS = printLCS(table, LCSlength, c1, c2);
	StringBuilder sb=new StringBuilder();
	for(int i=0;i<LCS.length;i++)
		sb.append(LCS[i]);
	System.out.println("The LCS of "+s1+" and "+s2+" is: "+sb.toString());
	}
public static int lcs(char[] c1, char[] c2, int m, int n) {
	table=new int[m+1][n+1];
 	for(int i=0;i<=m;i++){
		for(int j=0;j<=n;j++){
			if(i==0||j==0)
				table[i][j]=0;
			else if(c1[i-1]==c2[j-1])
				table[i][j]=table[i-1][j-1]+1;
			else
				table[i][j]=Math.max(table[i-1][j], table[i][j-1]);
		}
	}
	return table[c1.length][c2.length];
}
public static char[] printLCS(int[][] table, int LCSlength,char[] c1, char[] c2) {
	int i = c1.length;
	int j=c2.length;
		
	char[] LCS =new char[LCSlength];
	while(i>0 && j>0){
		if(c1[i-1]==c2[j-1])
		{
			LCS[LCSlength-1] = c1[i-1];
			i--;
			j--;
			LCSlength--;
		}
		else if(table[i-1][j]>table[i][j-1])
			i--;
		else
			j--;
	}
	return LCS;
}
}


/* We can do this in linear time by constrcting Suffix trees using Ukkonens principle. But the algorithm is
too big and beyond the scope of interviews */
