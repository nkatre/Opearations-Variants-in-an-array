/* Time Complexity of this algorithm is O(n*m). Space Complexity is O(n*m) 



 public static String longestCommonSubstring(final String s1, final String s2) {
           final int[][] a = new int[s1.length() + 1][s2.length() + 1];
           int u = 0, v = 0;

           for (int i = 0; i < s1.length(); i++)
           {
                   for (int j = 0; j < s2.length(); j++)
                   {
                           if (s1.charAt(i) == s2.charAt(j))
                           {
                                   a[i + 1][j + 1] = a[i][j] + 1;
                                   
                                   if (a[i + 1][j + 1] > a[u][v]) 
                                   {
                                           u = i + 1;
                                           v = j + 1;
                                   }
                           }
                   }
           }      
           return s1.substring(u - a[u][v], u);
   }


/* We can do this in linear time by constrcting Suffix trees using Ukkonens principle. But the algorithm is
too big and beyond the scope of interviews */
